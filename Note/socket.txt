System.Net;
System.Net.Sockets;

//创建终结点
IPAddress ip = IPAddress.Parse(host);
IPEndPoint ipe = new IPEndPoint(ip, port);


socket.reciver方法存放的byte数组应该取出后clear

socket.sendto可以用来发送udp、tcp，不需要绑定



游戏策划：
	网络传输的数据分析：
		1.非连续：1.全局信息：输赢
				  2.点状态：释放技能，受伤对敌人造成伤害或杀死敌人
		2.连续：位置信息
	网络信息的处理：					分析：对于网络传输来讲，游戏世界中的变化可以认为是由玩家的操作而产生的变动，全局信息的计算有服务器来处理，而全局信息的处理又依赖于点状态（如死亡，才会判定输赢）。点状态的触发应该有两种解决方式：1有主体传输，如A被B攻击，导致A受伤。这个过程中	的受伤判定应该是这样――――A发送自身受伤的点状态到服务器，服务器处理受伤的影响后，将产生的影响数据传给A,B。
		解决方式2是A受伤的状态由B引起，所以有B向服务器传输A受伤，然后服务器将A受伤信息处理后发送给A，B。
		决定采用方式1，因为这样，每个主机向服务器传输的都是自己所控制的角色的信息，其他信息都来自于服务器。
		额外的思考：这种传输方式导致的网络版和单机版的不同之处在于，1对于每个客户端来讲，角色不必考虑对外界的影响，只要传出自己的状态即可。如，发送技能不必考虑击中目标，只要向服务器发送“我使用了XX技能”的信息即可，是否击中由服务器来决定。即，游戏世界物体之间的交互逻辑由服务器来决定，角色自身的状态由客户端来决定。与此相比，单机版要处理所有逻辑（必须的），我认为这是网络游戏和单机的不同之处，当然网络版也可以采取在客户端判断逻辑，但那样就很难分清到底一个数据是应该上穿服务器处理，还是在本地处理比较好，毕竟何种信息才是“逻辑”？
		
		
	每个端口接收不同类型的数据，每个数据用于唯一的目的：
		transformInfo类：float xyz，实际用处：玩家连续的位置信息
		int类：分数
		float类：伤害
		bool类：输赢
	【额外】什么样的信息放在一个类中，像transformInfo封装了3个float ？
				将需要同时发送的信息放在一起，将相关性的强的信息放在一起
	【问题】能否设计成所有的int都通过一个端口实现？
		传输的类数据要多于原始类的信息。服务器可以识别客户端的身份。但从客户端角度来看，收到了大量的服务器传来的信息，如TransformInfo，这些信息需要让客户端如何去使用，所以额外的信息就是表明数据的用途。可以用playerID标注属于哪个客户端的信息，usefor用来标注信息的用途。其中，每个数据都含有playerID，这里用string ipPort来标示唯一性。userfor根据不同的游戏，不同的用途来标记，详细信息见下：
			1.userfor分类：
				TransformInfo类中的userfor，该类唯一标明角色的位置，所以不需要userfor
				IntInfo类中的userfor，int表示伤害(Hurt)，分数(Score)，输赢(Win)，是否可以开始游戏(Begin)，等那些用一个数据就可以标示的状态
			
			2.userfor属于一个枚举类中：
              int中的userfor固定之后，真正的数据标示对应userfor标示的度，如userfor=UserFor.Hurt,那么IntInfo.intInfo属性值标示的就是伤害的大小。
			3.数据的细分，userfor标注了数据的用途，如受到的伤害。
	【回顾猜想】回想unity自带的networkView和photon服务器引擎，他们在设定传输数据的时候，根据数据类型和变量名来收集和发送数据。这需要对数据做出解析。
		【问题】photon对数据做出了分类这种分类是否是定义了不同的socket端口？
		
	重新构建客户端和服务器端的通信流程：
		现在需要传输transformInfo和IntInfo两种信息需要两个端口来处理。【可选工作】：创建一个额外的端口来测试连接是否正常。
		客户端：1.初始化客户端程序，intInfo使用Tcp方式连接到服务器的特定端口。
								  transformInfo使用udp连接到服务器特定端口。
				2.设定传输数据，并接受数据				  
		服务器端：1.初始化服务器程序：设定一个监听端口，给连接成功的socket分配一个新的线程并用这个线程处理tcp ――――intInfo数据。
																	再分配一个线程接受处理udp数据――――transformInfo
	原则：所有阻塞都放如新的线程中		。

	TCP中的线程：1.开启监听函数
				 2.有成员连接进来，对成员的连接
		TCP面向连接，每对socket都可以作为一组通信。所以每对通信都可以单独处理。
	UDP面向本地端口，一个自身的端口可以做单独处理，如果要实现对每个客户端的信息单独处理。就要为每个客户端设定一个端口，分别在每个线程中处理。